install.packages(c("inline", "mvtnorm", "Rcpp", "RcppArmadillo", "RcppEigen"))
library(mvtnorm)
library(mvtnorm)
library(MASS)
library(inline)
library(Rcpp)
library(RcppEigen)
library(RcppArmadillo)
############################################
#INLINE RCPP FUNCTIONS
############################################
incl <- 'using Eigen::LLT;
using Eigen::Lower;
using Eigen::Map;
using Eigen::MatrixXd;
using Eigen::MatrixXi;
using Eigen::Upper;
using Eigen::VectorXd;
typedef Map<MatrixXd> MapMatd;
typedef Map<MatrixXi> MapMati;
typedef Map<VectorXd> MapVecd;
inline MatrixXd AtA(const MapMatd& A) {
int n(A.cols());
return MatrixXd(n,n).setZero().selfadjointView<Lower>()
.rankUpdate(A.adjoint());
}'
#Inverting a Matrix With RcppEigen
invCpp <- 'using Eigen::Map;
using Eigen::MatrixXd;
// Map the double matrix AA from R
const Map<MatrixXd> A(as<Map<MatrixXd> >(AA));
// evaluate and return the inverse of A
const MatrixXd At(A.inverse());
return wrap(At);'
rcpp_inv <- cxxfunction(signature(AA='matrix'),invCpp,"RcppEigen")
#Computing the Moore-Penrose Pseudoinverse using RcppArmadillo
rcpp_arm_pinv_src<- '
arma::mat Z = Rcpp::as<arma::mat>(ZS);
arma::mat Y =pinv(Z);
return wrap(Y);'
rcpp_arm_pinv <- cxxfunction(signature(ZS="numeric"),body=rcpp_arm_pinv_src,plugin="RcppArmadillo")
which R
version
library(mvtnorm)
library(MASS)
library(inline)
library(Rcpp)
library(RcppEigen)
library(RcppArmadillo)
############################################
#INLINE RCPP FUNCTIONS
############################################
incl <- 'using Eigen::LLT;
using Eigen::Lower;
using Eigen::Map;
using Eigen::MatrixXd;
using Eigen::MatrixXi;
using Eigen::Upper;
using Eigen::VectorXd;
typedef Map<MatrixXd> MapMatd;
typedef Map<MatrixXi> MapMati;
typedef Map<VectorXd> MapVecd;
inline MatrixXd AtA(const MapMatd& A) {
int n(A.cols());
return MatrixXd(n,n).setZero().selfadjointView<Lower>()
.rankUpdate(A.adjoint());
}'
#Inverting a Matrix With RcppEigen
invCpp <- 'using Eigen::Map;
using Eigen::MatrixXd;
// Map the double matrix AA from R
const Map<MatrixXd> A(as<Map<MatrixXd> >(AA));
// evaluate and return the inverse of A
const MatrixXd At(A.inverse());
return wrap(At);'
rcpp_inv <- cxxfunction(signature(AA='matrix'),invCpp,"RcppEigen")
#Computing the Moore-Penrose Pseudoinverse using RcppArmadillo
rcpp_arm_pinv_src<- '
arma::mat Z = Rcpp::as<arma::mat>(ZS);
arma::mat Y =pinv(Z);
return wrap(Y);'
load(RccpEigen)
library(RcppEigen)
library(RcppEigen)
library(mvtnorm)
library(MASS)
library(inline)
library(Rcpp)
library(RcppEigen)
library(RcppArmadillo)
############################################
#INLINE RCPP FUNCTIONS
############################################
incl <- 'using Eigen::LLT;
using Eigen::Lower;
using Eigen::Map;
using Eigen::MatrixXd;
using Eigen::MatrixXi;
using Eigen::Upper;
using Eigen::VectorXd;
typedef Map<MatrixXd> MapMatd;
typedef Map<MatrixXi> MapMati;
typedef Map<VectorXd> MapVecd;
inline MatrixXd AtA(const MapMatd& A) {
int n(A.cols());
return MatrixXd(n,n).setZero().selfadjointView<Lower>()
.rankUpdate(A.adjoint());
}'
#Inverting a Matrix With RcppEigen
invCpp <- 'using Eigen::Map;
using Eigen::MatrixXd;
// Map the double matrix AA from R
const Map<MatrixXd> A(as<Map<MatrixXd> >(AA));
// evaluate and return the inverse of A
const MatrixXd At(A.inverse());
return wrap(At);'
rcpp_inv <- cxxfunction(signature(AA='matrix'),invCpp,"RcppEigen")
#Computing the Moore-Penrose Pseudoinverse using RcppArmadillo
rcpp_arm_pinv_src<- '
arma::mat Z = Rcpp::as<arma::mat>(ZS);
arma::mat Y =pinv(Z);
return wrap(Y);'
rcpp_arm_pinv <- cxxfunction(signature(ZS="numeric"),body=rcpp_arm_pinv_src,plugin="RcppArmadillo")
#Computing the Cholesky decomposition of a matrix with RcppEigen
cholCpp <- 'const Map<MatrixXd> A(as<Map<MatrixXd> >(AA));
const MatrixXd LT((A.llt().matrixU()));
return wrap(LT);'
rcpp_chol <- cxxfunction(signature(AA='matrix'),cholCpp,"RcppEigen",incl)
#RMV_Norm
rcpp_rmvnorm <- function(n,chol_S)
{
m <- dim(chol_S)[1]
mat <- matrix(rnorm(n*m),nrow=n,ncol=m)
return (mat%*%chol_S)
}
#########################
# Load the data
load('dat.RData')
library(mvtnorm)
library(MASS)
library(inline)
library(Rcpp)
library(RcppEigen)
library(RcppArmadillo)
############################################
#INLINE RCPP FUNCTIONS
############################################
incl <- 'using Eigen::LLT;
using Eigen::Lower;
using Eigen::Map;
using Eigen::MatrixXd;
using Eigen::MatrixXi;
using Eigen::Upper;
using Eigen::VectorXd;
typedef Map<MatrixXd> MapMatd;
typedef Map<MatrixXi> MapMati;
typedef Map<VectorXd> MapVecd;
inline MatrixXd AtA(const MapMatd& A) {
int n(A.cols());
return MatrixXd(n,n).setZero().selfadjointView<Lower>()
.rankUpdate(A.adjoint());
}'
#Inverting a Matrix With RcppEigen
invCpp <- 'using Eigen::Map;
using Eigen::MatrixXd;
// Map the double matrix AA from R
const Map<MatrixXd> A(as<Map<MatrixXd> >(AA));
// evaluate and return the inverse of A
const MatrixXd At(A.inverse());
return wrap(At);'
rcpp_inv <- cxxfunction(signature(AA='matrix'),invCpp,"RcppEigen")
#Computing the Moore-Penrose Pseudoinverse using RcppArmadillo
rcpp_arm_pinv_src<- '
arma::mat Z = Rcpp::as<arma::mat>(ZS);
arma::mat Y =pinv(Z);
return wrap(Y);'
rcpp_arm_pinv <- cxxfunction(signature(ZS="numeric"),body=rcpp_arm_pinv_src,plugin="RcppArmadillo")
#Computing the Cholesky decomposition of a matrix with RcppEigen
cholCpp <- 'const Map<MatrixXd> A(as<Map<MatrixXd> >(AA));
const MatrixXd LT((A.llt().matrixU()));
return wrap(LT);'
rcpp_chol <- cxxfunction(signature(AA='matrix'),cholCpp,"RcppEigen",incl)
#RMV_Norm
rcpp_rmvnorm <- function(n,chol_S)
{
m <- dim(chol_S)[1]
mat <- matrix(rnorm(n*m),nrow=n,ncol=m)
return (mat%*%chol_S)
}
#########################
# Load the data
load('dat.RData')
#Compute inverse and pre-allocate samples
N <- 10000
phi <- .1 #parameter which controls the decay of the exponential kernel
load("/Users/Zoe/Documents/Summer19/SAO_Research/GP_MAXI/Training/4U1254-690.Rdata")
View(clean.data)
example = read.table("~/Documents/Summer19/SAO_Research/LMXB_BH/GROJ1655-40_asm_energyband.dat", skip =3)
example = read.table("~/Documents/Summer19/SAO_Research/GP_MAXI/HMXB_NS/4U1700-37_asm_energyband.dat", skip =3)
MJD = example[,1]
E2_3keV = example[,2]
E2_3keV_error = example[,3]
E3_5keV_kev = example[,4]
E3_5keV_kev_error = example[,5]
E5_12keV_kev = example[,6]
E5_12keV_kev_error = example[,7]
# Create the data frame that still needs to be cleaned
emp.data <- data.frame(
#emp_name = c("MJD","2-3 keV","2-3 keV error","3-5 keV","3-5 keV error", "5-12 keV", "5-12 keV error"),
MJD = example[,1],
E2_3keV = example[,2],
E2_3keV_error = example[,3],
E3_5keV = example[,4],
E3_5keV_error = example[,5],
E5_12keV = example[,6],
E5_12keV_error = example[,7],
stringsAsFactors = FALSE
)
"soft  colors  (SC)  are  defined  as  the  ratio of the  photon  counts
in  the  (3-5  keV)/(2-3  keV)  bandsand  hard  colors  (HC)  are  the
ratio  counts  in  the  (5-12  keV)/(2-3  keV)  bands.   Lastly,  the
relative  inten-sity is the sum of counts in the 2-3, 3-5, and 5-12 keV
bands normalized by the average of the top 0.01% of thecounts."
# Print the data frame.
#print(emp.data)
#print(emp.data$E2_3keV)
length(emp.data$E2_3keV)
#Removes 3sigma data points (data points that are less than 3 times the error measurement)
sub = subset(emp.data, E2_3keV >= 3*E2_3keV_error
& E3_5keV >= 3*E3_5keV_error
& E5_12keV >= 3*E5_12keV_error)
# Finds Soft and Hard X ray colors, sum
sub$soft_colors = sub$E3_5keV/sub$E2_3keV
sub$hard_colors = sub$E5_12keV/sub$E2_3keV
sub$sum = sub$E2_3keV + sub$E3_5keV+ sub$E5_12keV
# Makes the modified julian day start at 0
sub$MJD = sub$MJD - sub$MJD[1]
# Finds mean and standard deviation of x ray colors, as well as sum
mean_soft_color = mean(sub$soft_colors)
std_soft_color = sd(sub$soft_colors)
mean_hard_color = mean(sub$hard_colors)
std_hard_color = sd(sub$hard_colors)
mean_sum = mean(sub$sum)
std_sum = sd(sub$sum)
# Removes datapoints beyond 10 sigma of the mean
# These values sometimes happens when reflection from solar panel comes into the view
clean_data = subset(sub, abs(sub$soft_colors) < abs(10*std_soft_color+mean_soft_color)
& abs(sub$soft_colors) < abs(10*std_hard_color+mean_hard_color)
& abs(sub$sum < abs(10*std_sum+mean_sum)))
# Computes the sum and uses the top 0.01% of values to normalize the intensity(sum)
nsum = quantile(clean_data$sum, 0.99)
clean_data$sum = clean_data$sum/nsum
#Plots the soft color vs MJD
plot(sub$MJD[1:843], sub$soft_colors[1:843], main =source_names[10], pch = 20,
xlab ='Modified Julian Day', ylab = "soft colors", col='red')
plot(sub$MJD[1:843], sub$sum[1:843], main =source_names[10], pch = 20,
xlab ='Modified Julian Day', ylab = "intensity", col='red')
source_name_1 = source_names[1]
source_name_1
source_long_list = rep(c(source_name_1), length(clean_data$MJD))
source_long_list
classification_1 = classification_list[1]
classification_long_list = rep(c(classification_1), length(clean_data$MJD))
classification_long_list
# Create the data frame of cleandata
clean.data <- data.frame(
source_name = source_long_list,
classification = classification_long_list,
MJD = clean_data$MJD,
soft_colors = clean_data$soft_colors,
hard_colors= clean_data$hard_colors,
relative_intensity = clean_data$sum,
stringsAsFactors = FALSE
)
image()
example = read.table("~/Documents/Summer19/SAO_Research/GP_MAXI/HMXB_NS/4U1700-37_asm_energyband.dat", skip =3)
MJD = example[,1]
E2_3keV = example[,2]
E2_3keV_error = example[,3]
E3_5keV_kev = example[,4]
E3_5keV_kev_error = example[,5]
E5_12keV_kev = example[,6]
E5_12keV_kev_error = example[,7]
# Create the data frame that still needs to be cleaned
emp.data <- data.frame(
#emp_name = c("MJD","2-3 keV","2-3 keV error","3-5 keV","3-5 keV error", "5-12 keV", "5-12 keV error"),
MJD = example[,1],
E2_3keV = example[,2],
E2_3keV_error = example[,3],
E3_5keV = example[,4],
E3_5keV_error = example[,5],
E5_12keV = example[,6],
E5_12keV_error = example[,7],
stringsAsFactors = FALSE
)
"soft  colors  (SC)  are  defined  as  the  ratio of the  photon  counts
in  the  (3-5  keV)/(2-3  keV)  bandsand  hard  colors  (HC)  are  the
ratio  counts  in  the  (5-12  keV)/(2-3  keV)  bands.   Lastly,  the
relative  inten-sity is the sum of counts in the 2-3, 3-5, and 5-12 keV
bands normalized by the average of the top 0.01% of thecounts."
# Print the data frame.
#print(emp.data)
#print(emp.data$E2_3keV)
length(emp.data$E2_3keV)
#Removes 3sigma data points (data points that are less than 3 times the error measurement)
sub = subset(emp.data, E2_3keV >= 3*E2_3keV_error
& E3_5keV >= 3*E3_5keV_error
& E5_12keV >= 3*E5_12keV_error)
# Finds Soft and Hard X ray colors, sum
sub$soft_colors = sub$E3_5keV/sub$E2_3keV
sub$hard_colors = sub$E5_12keV/sub$E2_3keV
sub$sum = sub$E2_3keV + sub$E3_5keV+ sub$E5_12keV
# Makes the modified julian day start at 0
sub$MJD = sub$MJD - sub$MJD[1]
# Finds mean and standard deviation of x ray colors, as well as sum
mean_soft_color = mean(sub$soft_colors)
std_soft_color = sd(sub$soft_colors)
mean_hard_color = mean(sub$hard_colors)
std_hard_color = sd(sub$hard_colors)
mean_sum = mean(sub$sum)
std_sum = sd(sub$sum)
# Removes datapoints beyond 10 sigma of the mean
# These values sometimes happens when reflection from solar panel comes into the view
clean_data = subset(sub, abs(sub$soft_colors) < abs(10*std_soft_color+mean_soft_color)
& abs(sub$soft_colors) < abs(10*std_hard_color+mean_hard_color)
& abs(sub$sum < abs(10*std_sum+mean_sum)))
# Computes the sum and uses the top 0.01% of values to normalize the intensity(sum)
nsum = quantile(clean_data$sum, 0.99)
clean_data$sum = clean_data$sum/nsum
#Plots the soft color vs MJD
plot(sub$MJD[1:843], sub$soft_colors[1:843], main =source_names[10], pch = 20,
xlab ='Modified Julian Day', ylab = "soft colors", col='red')
plot(sub$MJD[1:843], sub$sum[1:843], main =source_names[10], pch = 20,
xlab ='Modified Julian Day', ylab = "intensity", col='red')
source_name_1 = source_names[1]
source_long_list = rep(c(source_name_1), length(clean_data$MJD))
classification_1 = classification_list[1]
classification_long_list = rep(c(classification_1), length(clean_data$MJD))
# Create the data frame of cleandata
clean.data <- data.frame(
source_name = source_long_list,
classification = classification_long_list,
MJD = clean_data$MJD,
soft_colors = clean_data$soft_colors,
hard_colors= clean_data$hard_colors,
relative_intensity = clean_data$sum,
stringsAsFactors = FALSE
)
save(clean.data,file="data.dat")
getwd()
